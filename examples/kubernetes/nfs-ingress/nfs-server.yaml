---
# Deploying separate nfs-server nodes for each project and/or environment...
# Using a node selector to assign nfs to specific nodes (via the nfs-server role)
# e.g.
# kubectl label node nfs001 node-role.kubernetes.io/nfs-server=nfs-server
#
# To check the hostPath mounting, open a shell on the nfs container...
# Run command in existing pod (1 container case)
# $ kubectl exec nfs-pod -- /bin/bash
# Run command in existing pod (multi-container case)
# $ kubectl exec nfs-pod -c nfs-container -it -- /bin/bash
# $ kubectl exec nfs-server -it -- /bin/bash
# $ kubectl exec nfs-server -it --namespace=autostructure-development -- /bin/bash
#
# @mahdix kubectl create command now just add image, because we want it enough simple.
# but now 1.8 support kubectl set env command.
# You can use:
# $ kubectl create deploy a --image=xxx --dry-run -o yaml | kubectl set env --local -f - 'env=prod' -o yaml . hope this can help you
#
# @See https://github.com/kubernetes/kubernetes/issues/52787
#
kind: Pod
apiVersion: v1
metadata:
  namespace: default
  name: nfs-server
  labels:
    role: nfs-server
spec:
  tolerations:
    - key: node-role.kubernetes.io/nfs-server
      effect: NoSchedule
  nodeSelector:
    node-role.kubernetes.io/nfs-server: "nfs-server"
  restartPolicy: Always
  volumes:
    - name: nfs-hostpath-volume-files
      hostPath:
        path: /srv/nfs-server/files
    - name: nfs-hostpath-volume-etc-export
      hostPath:
        path: /srv/nfs-server/etc/export # can we just point to a file?
  containers:
    - name: nfs-server
      image: gcr.io/google_containers/volume-nfs:0.8
      imagePullPolicy: "IfNotPresent"
      securityContext:
        privileged: true
      ports:
        - name: nfs-2049
          containerPort: 2049
          protocol: TCP
      volumeMounts:
        - name: nfs-hostpath-volume-files
          mountPath: /exports
        - name: nfs-hostpath-volume-etc-export
          mountPath: /etc/export
  nodeSelector:
    node-role.kubernetes.io/nfs-server: "nfs-server"
